class Solution {
public:
    bool isValid(string s) {
        unordered_map<char, char> parentheses = { {'(', ')'}, {'{', '}'}, {'[', ']'} };
        stack<char> closedStack;
        for (int i = 0; i < s.length(); i++)
        {
            if (parentheses.find(s[i]) == parentheses.end())
            {
                if (closedStack.size() == 0)
                {
                    return false;
                }
                // check close bracket
                if (s[i] != closedStack.top())
                {
                    return false;
                }
                closedStack.pop();
            }
            else
            {
                closedStack.push(parentheses[s[i]]);
            }
        }
        return closedStack.size() == 0;
    }
};