/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* result = nullptr;
        ListNode* current = nullptr;
        ListNode* tempPtr = nullptr;
        ListNode* l1 = list1;
        ListNode* l2 = list2;

        while (l1 != nullptr || l2 != nullptr)
        {
            if (l1 == nullptr)
            {
                tempPtr = l2;
                l2 = l2->next;
            }
            else if (l2 == nullptr)
            {
                tempPtr = l1;
                l1 = l1->next;
            }
            else
            {
                if (l1->val < l2->val)
                {
                    tempPtr = l1;
                    l1 = l1->next;
                }
                else
                {
                    tempPtr = l2;
                    l2 = l2->next;
                }
            }

            if (current != nullptr)
            {
                current->next = tempPtr;
            }
            current = tempPtr;

            if (result == nullptr)
            {
                result = current;
            }
        }

        return result;
    }
};